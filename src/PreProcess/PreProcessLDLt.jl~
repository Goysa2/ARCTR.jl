#@debug 
function preprocessLDLt(H ,g, params::Tparams,n1,n2)
    global L, D, P, rho, ncomp  # For globalize the result within the try-catch
    try
        (L, D, P, rho, ncomp) = ldlt_symm(H,'r')
    catch
 	println("*******   Problem in LDLt")
        res = PDataLDLt()
        res.OK = false
        return res
    end

    if true in isnan(D) 
 	println("*******   Problem in D from LDLt: NaN")
        println(" cond (H) = $(cond(H))")
        res = PDataLDLt()
        res.OK = false
        return res
    end

    DiagD, Q = eig(D)
    l_m, = findmin(DiagD)
    ĝ = L\(P*g)   #(P'*L)\g
    g̃ = Q'*ĝ
    n_g = norm(g)
    #ϵ = 1.0e-10#*n_g
    λ =  max(-l_m,0.0) #max((-ϵ-1)*l_m,ϵ)
    return  PDataLDLt(L,D,P,DiagD,Q,g̃,λ,true,true)
end


function TtildeInv(X :: PDataLDLt, d̃ ::  Array{Float64,1})
    #return X.P'*(X.L'\(X.Q*d̃))  #(X.Q * X.L' * X.P)\d̃
    # (Q'*L*P)^(-1) = P'*L^(-t)*Q 
    d̂ = X.Q*d̃
    return X.P'*(X.L'\d̂)
end


function decrease(X :: PDataLDLt, α:: Float64, TR:: TrustRegion)
    X.success = false
    return decrease(α, TR)
end

function reconstructH(X :: PDataLDLt)
    return X.P'*X.L*X.D*X.L'*X.P
end
